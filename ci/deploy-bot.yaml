---
- hosts: all
  remote_user: root
  vars:
    - container_name: oracle-lens
    - image_name: oracle-lens
    - image_tag: "{{ query('community.general.random_string', length=10, upper=false, lower=false, override_all='qwertyuioplkjhgfasdzxcvbnm', override_special='[]', numbers=false) }}"
    # - riot_api_key:
    # - calendar_api_key:
    # - calendar_base_url:
    # - telegram_api_key:
    # - telegram_chat_id:
    # - telegram_log_chat_id:
    # - summoner_names:
    # - ansible_ssh_private_key_file: "../oracle"
  tasks:
    - name: build container image
      command: "docker build -t {{image_name}}:{{image_tag}} -f ../Dockerfile ../"
      delegate_to: 127.0.0.1

    - name: archive container image as a tarball
      command: "docker save -o {{image_name}}.tar {{image_name}}:{{image_tag}}"
      delegate_to: 127.0.0.1

    - name: copy tarball to host
      copy:
        src: "{{ image_name }}.tar"
        dest: "./{{ image_name }}.tar"

    - name: load container from tarball
      docker_image:
        name: "{{ image_name }}"
        tag: "{{ image_tag}}"
        load_path: "./{{ image_name }}.tar"
        source: load

    - name: start container with new version
      docker_container:
        name: "{{ container_name }}"
        image: "{{ image_name }}:{{ image_tag }}"
        state: started
        network_mode: host
        restart_policy: unless-stopped
        env:
          App.DbOptions.UserName: "{{ postgres_username }}"
          App.DbOptions.Password: "{{ postgres_password }}"
          App.Riot.ApiKey: "{{ riot_api_key }}"
          App.Calendar.ApiKey: "{{ calendar_api_key }}"
          App.Calendar.BaseUrl: "{{ calendar_base_url }}"
          App.Telegram.ApiKey: "{{ telegram_api_key }}"
          App.Telegram.ChatId: "{{ telegram_chat_id }}"
          App.Telegram.LogChatId: "{{ telegram_log_chat_id }}"
          App.SummonerNames: "{{ summoner_names }}"
      register: deploy_service

    - name: prune docker on {{ansible_host}}
      shell: docker image prune -a --filter "until=72h" --force
      when:
        - deploy_service.container.State.Running

