---
- hosts: all
  remote_user: root
  vars:
    - container_name: oracle-lens
    - image_name: oracle-lens
    - image_tag: latest

  tasks:
    - name: build container image
      command: "docker build -t {{image_name}}:{{image_tag}} -f ../Dockerfile ../"
      delegate_to: 127.0.0.1

    - name: archive container image as a tarball
      command: "docker save -o {{image_name}}.tar {{image_name}}:{{image_tag}}"
      delegate_to: 127.0.0.1

    - name: copy tarball to host
      copy:
        src: "{{ image_name }}.tar"
        dest: "./{{ image_name }}.tar"

    - name: remove container
      docker_container:
        name: "{{ container_name }}"
        state: absent

    - name: Remove image
      docker_image:
        state: absent
        name: "{{ image_name }}:{{ image_tag }}"
        tag: v1

    - name: load container from tarball
      docker_image:
        name: "{{ image_name }}"
        tag: "{{ image_tag}}"
        load_path: "./{{ image_name }}.tar"
        source: load

    - name: start container with new version
      docker_container:
        name: "{{ container_name }}"
        image: "{{ image_name }}:{{ image_tag }}"
        state: started
        network_mode: host
        restart_policy: unless-stopped
        log_options:
          max-size: 10m
        env:
          App__DbOptions__UserName: "{{ postgres_username }}"
          App__DbOptions__Password: "{{ postgres_password }}"
          App__Riot__ApiKey: "{{ riot_api_key }}"
          App__Calendar__ApiKey: "{{ calendar_api_key }}"
          App__Calendar__BaseUrl: "{{ calendar_base_url }}"
          App__Telegram__ApiKey: "{{ telegram_api_key }}"
          App__Telegram__ChatId: "{{ telegram_chat_id }}"
          App__Telegram__LogChatId: "{{ telegram_log_chat_id }}"
          App__SummonerNames: "{{ summoner_names }}"
      register: deploy_service

    - name: prune docker on {{ansible_host}}
      shell: docker image prune -a --filter "until=72h" --force
      when:
        - deploy_service.container.State.Running

